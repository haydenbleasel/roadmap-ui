{
  "$schema": "https://ui.shadcn.com/schema/registry.json",
  "homepage": "https://www.kibo-ui.com/editor",
  "name": "editor",
  "type": "registry:ui",
  "author": "Hayden Bleasel <hello@haydenbleasel.com>",
  "registryDependencies": [
    "button",
    "popover",
    "separator"
  ],
  "dependencies": [
    "@tiptap/extension-character-count",
    "@tiptap/extension-color",
    "@tiptap/react",
    "@tiptap/starter-kit",
    "lucide-react"
  ],
  "devDependencies": [],
  "files": [
    {
      "type": "registry:ui",
      "path": "index.tsx",
      "content": "'use client';\n\nimport { Button } from '@/components/ui/button';\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from '@/components/ui/popover';\nimport { Separator } from '@/components/ui/separator';\nimport { cn } from '@/lib/utils';\nimport CharacterCount from '@tiptap/extension-character-count';\nimport Color from '@tiptap/extension-color';\nimport {\n  BubbleMenu as BubbleMenuComponent,\n  type BubbleMenuProps,\n  FloatingMenu as FloatingMenuComponent,\n  type FloatingMenuProps,\n  EditorProvider as TiptapEditorProvider,\n  type EditorProviderProps as TiptapEditorProviderProps,\n  useCurrentEditor,\n} from '@tiptap/react';\nimport StarterKit from '@tiptap/starter-kit';\nimport {\n  BoldIcon,\n  CheckIcon,\n  CheckSquare,\n  ChevronDownIcon,\n  Code,\n  CodeIcon,\n  ExternalLinkIcon,\n  Heading1,\n  Heading2,\n  Heading3,\n  ItalicIcon,\n  ListOrdered,\n  type LucideIcon,\n  type LucideProps,\n  RemoveFormattingIcon,\n  StrikethroughIcon,\n  SubscriptIcon,\n  SuperscriptIcon,\n  TextIcon,\n  TextQuote,\n  TrashIcon,\n  UnderlineIcon,\n} from 'lucide-react';\nimport type { ReactNode } from 'react';\nimport { useEffect, useRef, useState } from 'react';\nimport type { FormEventHandler, HTMLAttributes } from 'react';\n\nexport type EditorProviderProps = TiptapEditorProviderProps & {\n  className?: string;\n  limit?: number;\n};\n\n// StarterKit contains the following:\n// - Blockquote\n// - BulletList\n// - CodeBlock\n// - Document\n// - HardBreak\n// - Heading\n// - HorizontalRule\n// - ListItem\n// - OrderedList\n// - Paragraph\n// - Text\n// - Marks\n// - Bold\n// - Code\n// - Italic\n// - Strike\n// - Extensions\n// - Dropcursor\n// - Gapcursor\n// - History\n\nexport const EditorProvider = ({\n  className,\n  extensions,\n  limit,\n  ...props\n}: EditorProviderProps) => {\n  const defaultExtensions = [\n    StarterKit,\n    Color,\n    CharacterCount.configure({\n      limit,\n    }),\n  ];\n\n  return (\n    <div className={className}>\n      <TiptapEditorProvider\n        extensions={[...defaultExtensions, ...(extensions ?? [])]}\n        {...props}\n      />\n    </div>\n  );\n};\n\nexport const useCharacterCount = () => {\n  const { editor } = useCurrentEditor();\n\n  if (!editor) {\n    return 0;\n  }\n\n  return {\n    characters: editor.storage.characterCount.characters(),\n    words: editor.storage.characterCount.words(),\n  };\n};\n\nexport type EditorFloatingMenuProps = Omit<FloatingMenuProps, 'editor'>;\n\nexport const EditorFloatingMenu = (props: EditorFloatingMenuProps) => (\n  <FloatingMenuComponent editor={null} {...props} />\n);\n\nexport type EditorBubbleMenuProps = Omit<BubbleMenuProps, 'editor'>;\n\nexport const EditorBubbleMenu = ({\n  className,\n  children,\n  ...props\n}: EditorBubbleMenuProps) => (\n  <BubbleMenuComponent\n    className={cn(\n      'flex rounded-xl border bg-background p-0.5 shadow',\n      '[&>*:first-child]:rounded-l-[9px]',\n      '[&>*:last-child]:rounded-r-[9px]',\n      className\n    )}\n    tippyOptions={{\n      maxWidth: 'none',\n    }}\n    editor={null}\n    {...props}\n  >\n    {children && Array.isArray(children)\n      ? children.reduce((acc: ReactNode[], child, index) => {\n          if (index === 0) {\n            return [child];\n          }\n\n          acc.push(<Separator key={index} orientation=\"vertical\" />);\n          acc.push(child);\n          return acc;\n        }, [])\n      : children}\n  </BubbleMenuComponent>\n);\n\ntype EditorBubbleMenuButtonProps = {\n  name?: string;\n  isActive: () => boolean;\n  command: () => void;\n  icon: LucideIcon | ((props: LucideProps) => ReactNode);\n};\n\nconst BubbleMenuButton = ({\n  name,\n  isActive,\n  command,\n  icon: Icon,\n}: EditorBubbleMenuButtonProps) => (\n  <Button\n    onSelect={() => command()}\n    variant=\"ghost\"\n    className=\"flex w-full gap-2\"\n    size=\"sm\"\n  >\n    <Icon size={16} className=\"shrink-0 text-muted-foreground\" />\n    {name && <span className=\"flex-1 text-left\">{name}</span>}\n    {isActive() ? (\n      <CheckIcon size={16} className=\"shrink-0 text-muted-foreground\" />\n    ) : null}\n  </Button>\n);\n\nexport const EditorBubbleMenuClearFormatting = () => {\n  const { editor } = useCurrentEditor();\n\n  if (!editor) {\n    return null;\n  }\n\n  return (\n    <BubbleMenuButton\n      command={() => editor.chain().focus().clearNodes().unsetAllMarks().run()}\n      icon={RemoveFormattingIcon}\n      isActive={() => false}\n    />\n  );\n};\n\nexport const EditorBubbleMenuNodeText = () => {\n  const { editor } = useCurrentEditor();\n\n  if (!editor) {\n    return null;\n  }\n\n  return (\n    <BubbleMenuButton\n      name=\"Text\"\n      command={() =>\n        editor.chain().focus().toggleNode('paragraph', 'paragraph').run()\n      }\n      // I feel like there has to be a more efficient way to do this â€“ feel free to PR if you know how!\n      isActive={() =>\n        (editor &&\n          !editor.isActive('paragraph') &&\n          !editor.isActive('bulletList') &&\n          !editor.isActive('orderedList')) ??\n        false\n      }\n      icon={TextIcon}\n    />\n  );\n};\n\nexport const EditorBubbleMenuNodeHeading1 = () => {\n  const { editor } = useCurrentEditor();\n\n  if (!editor) {\n    return null;\n  }\n\n  return (\n    <BubbleMenuButton\n      name=\"Heading 1\"\n      command={() => editor.chain().focus().toggleHeading({ level: 1 }).run()}\n      icon={Heading1}\n      isActive={() => editor.isActive('heading', { level: 1 }) ?? false}\n    />\n  );\n};\n\nexport const EditorBubbleMenuNodeHeading2 = () => {\n  const { editor } = useCurrentEditor();\n\n  if (!editor) {\n    return null;\n  }\n\n  return (\n    <BubbleMenuButton\n      name=\"Heading 2\"\n      command={() => editor.chain().focus().toggleHeading({ level: 2 }).run()}\n      icon={Heading2}\n      isActive={() => editor.isActive('heading', { level: 2 }) ?? false}\n    />\n  );\n};\n\nexport const EditorBubbleMenuNodeHeading3 = () => {\n  const { editor } = useCurrentEditor();\n\n  if (!editor) {\n    return null;\n  }\n\n  return (\n    <BubbleMenuButton\n      name=\"Heading 3\"\n      command={() => editor.chain().focus().toggleHeading({ level: 3 }).run()}\n      icon={Heading3}\n      isActive={() => editor.isActive('heading', { level: 3 }) ?? false}\n    />\n  );\n};\n\nexport const EditorBubbleMenuNodeBulletList = () => {\n  const { editor } = useCurrentEditor();\n\n  if (!editor) {\n    return null;\n  }\n\n  return (\n    <BubbleMenuButton\n      name=\"Bullet List\"\n      command={() => editor.chain().focus().toggleBulletList().run()}\n      icon={ListOrdered}\n      isActive={() => editor.isActive('bulletList') ?? false}\n    />\n  );\n};\n\nexport const EditorBubbleMenuNodeOrderedList = () => {\n  const { editor } = useCurrentEditor();\n\n  if (!editor) {\n    return null;\n  }\n\n  return (\n    <BubbleMenuButton\n      name=\"Numbered List\"\n      command={() => editor.chain().focus().toggleOrderedList().run()}\n      icon={ListOrdered}\n      isActive={() => editor.isActive('orderedList') ?? false}\n    />\n  );\n};\n\nexport const EditorBubbleMenuNodeTaskList = () => {\n  const { editor } = useCurrentEditor();\n\n  if (!editor) {\n    return null;\n  }\n\n  return (\n    <BubbleMenuButton\n      name=\"To-do List\"\n      command={() => editor.chain().focus().toggleTaskList().run()}\n      icon={CheckSquare}\n      isActive={() => editor.isActive('taskItem') ?? false}\n    />\n  );\n};\n\nexport const EditorBubbleMenuNodeQuote = () => {\n  const { editor } = useCurrentEditor();\n\n  if (!editor) {\n    return null;\n  }\n\n  return (\n    <BubbleMenuButton\n      name=\"Quote\"\n      command={() =>\n        editor\n          .chain()\n          .focus()\n          .toggleNode('paragraph', 'paragraph')\n          .toggleBlockquote()\n          .run()\n      }\n      icon={TextQuote}\n      isActive={() => editor.isActive('blockquote') ?? false}\n    />\n  );\n};\n\nexport const EditorBubbleMenuNodeCode = () => {\n  const { editor } = useCurrentEditor();\n\n  if (!editor) {\n    return null;\n  }\n\n  return (\n    <BubbleMenuButton\n      name=\"Code\"\n      command={() => editor.chain().focus().toggleCodeBlock().run()}\n      icon={Code}\n      isActive={() => editor.isActive('codeBlock') ?? false}\n    />\n  );\n};\n\nexport type EditorBubbleMenuSelectorProps = HTMLAttributes<HTMLDivElement> & {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  title: string;\n};\n\nexport const EditorBubbleMenuSelector = ({\n  open,\n  onOpenChange,\n  title,\n  className,\n  children,\n  ...props\n}: EditorBubbleMenuSelectorProps) => {\n  const { editor } = useCurrentEditor();\n\n  if (!editor) {\n    return null;\n  }\n\n  return (\n    <Popover modal open={open} onOpenChange={onOpenChange}>\n      <PopoverTrigger asChild>\n        <Button\n          size=\"sm\"\n          variant=\"ghost\"\n          className=\"gap-2 rounded-none border-none\"\n        >\n          <span className=\"whitespace-nowrap text-sm\">{title}</span>\n          <ChevronDownIcon size={16} />\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent\n        sideOffset={5}\n        align=\"start\"\n        className={cn('w-48 p-1', className)}\n        {...props}\n      >\n        {children}\n      </PopoverContent>\n    </Popover>\n  );\n};\n\nexport const EditorBubbleMenuFormatBold = () => {\n  const { editor } = useCurrentEditor();\n\n  if (!editor) {\n    return null;\n  }\n\n  return (\n    <BubbleMenuButton\n      name=\"Bold\"\n      isActive={() => editor.isActive('bold') ?? false}\n      command={() => editor.chain().focus().toggleBold().run()}\n      icon={BoldIcon}\n    />\n  );\n};\n\nexport const EditorBubbleMenuFormatItalic = () => {\n  const { editor } = useCurrentEditor();\n\n  if (!editor) {\n    return null;\n  }\n\n  return (\n    <BubbleMenuButton\n      name=\"Italic\"\n      isActive={() => editor.isActive('italic') ?? false}\n      command={() => editor.chain().focus().toggleItalic().run()}\n      icon={ItalicIcon}\n    />\n  );\n};\n\nexport const EditorBubbleMenuFormatStrike = () => {\n  const { editor } = useCurrentEditor();\n\n  if (!editor) {\n    return null;\n  }\n\n  return (\n    <BubbleMenuButton\n      name=\"Strikethrough\"\n      isActive={() => editor.isActive('strike') ?? false}\n      command={() => editor.chain().focus().toggleStrike().run()}\n      icon={StrikethroughIcon}\n    />\n  );\n};\n\nexport const EditorBubbleMenuFormatCode = () => {\n  const { editor } = useCurrentEditor();\n\n  if (!editor) {\n    return null;\n  }\n\n  return (\n    <BubbleMenuButton\n      name=\"Code\"\n      isActive={() => editor.isActive('code') ?? false}\n      command={() => editor.chain().focus().toggleCode().run()}\n      icon={CodeIcon}\n    />\n  );\n};\n\nexport const EditorBubbleMenuFormatSubscript = () => {\n  const { editor } = useCurrentEditor();\n\n  if (!editor) {\n    return null;\n  }\n\n  return (\n    <BubbleMenuButton\n      name=\"Subscript\"\n      isActive={() => editor.isActive('subscript') ?? false}\n      command={() => editor.chain().focus().toggleSubscript().run()}\n      icon={SubscriptIcon}\n    />\n  );\n};\n\nexport const EditorBubbleMenuFormatSuperscript = () => {\n  const { editor } = useCurrentEditor();\n\n  if (!editor) {\n    return null;\n  }\n\n  return (\n    <BubbleMenuButton\n      name=\"Superscript\"\n      isActive={() => editor.isActive('superscript') ?? false}\n      command={() => editor.chain().focus().toggleSuperscript().run()}\n      icon={SuperscriptIcon}\n    />\n  );\n};\n\nexport const EditorBubbleMenuFormatUnderline = () => {\n  const { editor } = useCurrentEditor();\n\n  if (!editor) {\n    return null;\n  }\n\n  return (\n    <BubbleMenuButton\n      name=\"Underline\"\n      isActive={() => editor.isActive('underline') ?? false}\n      command={() => editor.chain().focus().toggleUnderline().run()}\n      icon={UnderlineIcon}\n    />\n  );\n};\n\ntype BubbleMenuLinkSelectorProperties = {\n  readonly open: boolean;\n  readonly onOpenChange: (open: boolean) => void;\n};\n\nexport const EditorBubbleMenuLinkSelector = ({\n  open,\n  onOpenChange,\n}: BubbleMenuLinkSelectorProperties) => {\n  const [url, setUrl] = useState<string>('');\n  const inputReference = useRef<HTMLInputElement>(null);\n  const { editor } = useCurrentEditor();\n\n  const isValidUrl = (text: string): boolean => {\n    try {\n      new URL(text);\n      return true;\n    } catch {\n      return false;\n    }\n  };\n\n  const getUrlFromString = (text: string): string | null => {\n    if (isValidUrl(text)) {\n      return text;\n    }\n    try {\n      if (text.includes('.') && !text.includes(' ')) {\n        return new URL(`https://${text}`).toString();\n      }\n\n      return null;\n    } catch {\n      return null;\n    }\n  };\n\n  useEffect(() => {\n    inputReference.current?.focus();\n  }, []);\n\n  if (!editor) {\n    return null;\n  }\n\n  const handleSubmit: FormEventHandler<HTMLFormElement> = (event) => {\n    event.preventDefault();\n\n    const href = getUrlFromString(url);\n\n    if (href) {\n      editor.chain().focus().setLink({ href }).run();\n      onOpenChange(false);\n    }\n  };\n\n  const defaultValue = (editor.getAttributes('link') as { href?: string }).href;\n\n  return (\n    <Popover modal open={open} onOpenChange={onOpenChange}>\n      <PopoverTrigger asChild>\n        <Button\n          size=\"sm\"\n          variant=\"ghost\"\n          className=\"gap-2 rounded-none border-none\"\n        >\n          <ExternalLinkIcon size={16} />\n          <p\n            className={cn(\n              'underline decoration-text-muted underline-offset-4',\n              {\n                'text-primary': editor.isActive('link'),\n              }\n            )}\n          >\n            Link\n          </p>\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent align=\"start\" className=\"w-60 p-0\" sideOffset={10}>\n        <form onSubmit={handleSubmit} className=\"flex p-1\">\n          <input\n            aria-label=\"Link URL\"\n            ref={inputReference}\n            type=\"text\"\n            placeholder=\"Paste a link\"\n            className=\"flex-1 bg-background p-1 text-sm outline-none\"\n            defaultValue={defaultValue ?? ''}\n            value={url}\n            onChange={(event) => setUrl(event.target.value)}\n          />\n          {editor.getAttributes('link').href ? (\n            <Button\n              size=\"icon\"\n              variant=\"outline\"\n              type=\"button\"\n              className=\"flex h-8 items-center rounded-sm p-1 text-destructive transition-all hover:bg-destructive-foreground dark:hover:bg-destructive\"\n              onClick={() => {\n                editor.chain().focus().unsetLink().run();\n                onOpenChange(false);\n              }}\n            >\n              <TrashIcon size={16} />\n            </Button>\n          ) : (\n            <Button size=\"icon\" variant=\"secondary\" className=\"h-8\">\n              <CheckIcon size={16} />\n            </Button>\n          )}\n        </form>\n      </PopoverContent>\n    </Popover>\n  );\n};\n\nexport type EditorBubbleMenuColorProps = {\n  color: string;\n  name: string;\n};\n\nexport const EditorBubbleMenuTextColor = ({\n  color,\n  name,\n}: EditorBubbleMenuColorProps) => {\n  const { editor } = useCurrentEditor();\n\n  if (!editor) {\n    return null;\n  }\n\n  return (\n    <BubbleMenuButton\n      name={name}\n      command={() => editor.chain().focus().setColor(color).run()}\n      icon={() => (\n        <div\n          className=\"h-4 w-4 rounded-sm border\"\n          style={{ backgroundColor: color }}\n        />\n      )}\n      isActive={() => editor.isActive('textStyle', { color }) ?? false}\n    />\n  );\n};\n\nexport const EditorBubbleMenuBackgroundColor = ({\n  color,\n  name,\n}: EditorBubbleMenuColorProps) => {\n  const { editor } = useCurrentEditor();\n\n  if (!editor) {\n    return null;\n  }\n\n  return (\n    <BubbleMenuButton\n      name={name}\n      command={() => editor.chain().focus().setHighlight({ color }).run()}\n      icon={() => (\n        <div\n          className=\"h-4 w-4 rounded-sm border\"\n          style={{ backgroundColor: color }}\n        />\n      )}\n      isActive={() => editor.isActive('highlight', { color }) ?? false}\n    />\n  );\n};\n",
      "target": "components/ui/kibo-ui/editor.tsx"
    }
  ]
}