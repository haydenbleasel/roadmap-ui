{
  "$schema": "https://ui.shadcn.com/schema/registry.json",
  "homepage": "https://www.kibo-ui.com/editor",
  "name": "editor",
  "type": "registry:ui",
  "author": "Hayden Bleasel <hello@haydenbleasel.com>",
  "registryDependencies": [
    "button",
    "popover"
  ],
  "dependencies": [
    "@tiptap/react",
    "@tiptap/starter-kit",
    "lucide-react"
  ],
  "devDependencies": [],
  "files": [
    {
      "type": "registry:ui",
      "path": "index.tsx",
      "content": "'use client';\n\nimport { Button } from '@/components/ui/button';\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from '@/components/ui/popover';\nimport { cn } from '@/lib/utils';\nimport {\n  BubbleMenu as BubbleMenuComponent,\n  type BubbleMenuProps as BubbleMenuComponentProps,\n  EditorProvider,\n  type EditorProviderProps,\n  FloatingMenu as FloatingMenuComponent,\n  type FloatingMenuProps as FloatingMenuComponentProps,\n  useCurrentEditor,\n} from '@tiptap/react';\nimport StarterKit from '@tiptap/starter-kit';\nimport {\n  BoldIcon,\n  CheckIcon,\n  CheckSquare,\n  ChevronDown,\n  ChevronDownIcon,\n  Code,\n  CodeIcon,\n  ExternalLinkIcon,\n  Heading1,\n  Heading2,\n  Heading3,\n  ItalicIcon,\n  ListOrdered,\n  type LucideIcon,\n  RemoveFormattingIcon,\n  StrikethroughIcon,\n  SubscriptIcon,\n  SuperscriptIcon,\n  TextIcon,\n  TextQuote,\n  TrashIcon,\n  UnderlineIcon,\n} from 'lucide-react';\nimport { useEffect, useRef, useState } from 'react';\nimport type { FormEventHandler } from 'react';\nimport type { HTMLAttributes } from 'react';\n\nexport type ProviderProps = EditorProviderProps & {\n  className?: string;\n};\n\nconst defaultExtensions = [StarterKit];\n\nexport const Provider = ({\n  className,\n  extensions,\n  ...props\n}: ProviderProps) => (\n  <div className={className}>\n    <EditorProvider\n      extensions={[...defaultExtensions, ...(extensions ?? [])]}\n      {...props}\n    />\n  </div>\n);\n\nexport type FloatingMenuProps = Omit<FloatingMenuComponentProps, 'editor'>;\n\nexport const FloatingMenu = (props: FloatingMenuProps) => (\n  <FloatingMenuComponent editor={null} {...props} />\n);\n\nexport type BubbleMenuProps = Omit<BubbleMenuComponentProps, 'editor'>;\n\nexport const BubbleMenu = ({ className, ...props }: BubbleMenuProps) => (\n  <BubbleMenuComponent\n    className={cn(\n      'flex rounded-xl border bg-background p-0.5 shadow',\n      className\n    )}\n    editor={null}\n    {...props}\n  />\n);\n\nexport type BubbleMenuTextButtonsProps = HTMLAttributes<HTMLDivElement>;\n\nexport const BubbleMenuTextButtons = ({\n  className,\n  ...props\n}: BubbleMenuTextButtonsProps) => {\n  const { editor } = useCurrentEditor();\n\n  if (!editor) {\n    return null;\n  }\n\n  const items: {\n    name: string;\n    isActive: () => boolean;\n    command: () => void;\n    icon: LucideIcon;\n  }[] = [\n    {\n      name: 'clear-formatting',\n      isActive: () => false,\n      command: () => editor.chain().focus().clearNodes().unsetAllMarks().run(),\n      icon: RemoveFormattingIcon,\n    },\n  ];\n\n  return (\n    <div className={cn('flex', className)} {...props}>\n      {items.map((item) => (\n        <Button\n          key={item.name}\n          onSelect={() => item.command()}\n          className=\"rounded-none\"\n          variant=\"ghost\"\n          size=\"icon\"\n        >\n          <item.icon\n            size={16}\n            className={cn({\n              'text-primary': item.isActive(),\n            })}\n          />\n        </Button>\n      ))}\n    </div>\n  );\n};\n\nexport type BubbleMenuNodeSelectorProps = HTMLAttributes<HTMLDivElement> & {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n};\n\nexport const BubbleMenuNodeSelector = ({\n  open,\n  onOpenChange,\n  className,\n  ...props\n}: BubbleMenuNodeSelectorProps) => {\n  const { editor } = useCurrentEditor();\n\n  if (!editor) {\n    return null;\n  }\n\n  const items = [\n    {\n      name: 'Text',\n      icon: TextIcon,\n      command: () =>\n        editor.chain().focus().toggleNode('paragraph', 'paragraph').run(),\n      // I feel like there has to be a more efficient way to do this â€“ feel free to PR if you know how!\n      isActive: () =>\n        (editor &&\n          !editor.isActive('paragraph') &&\n          !editor.isActive('bulletList') &&\n          !editor.isActive('orderedList')) ??\n        false,\n    },\n    {\n      name: 'Heading 1',\n      icon: Heading1,\n      command: () => editor.chain().focus().toggleHeading({ level: 1 }).run(),\n      isActive: () => editor.isActive('heading', { level: 1 }) ?? false,\n    },\n    {\n      name: 'Heading 2',\n      icon: Heading2,\n      command: () => editor.chain().focus().toggleHeading({ level: 2 }).run(),\n      isActive: () => editor.isActive('heading', { level: 2 }) ?? false,\n    },\n    {\n      name: 'Heading 3',\n      icon: Heading3,\n      command: () => editor.chain().focus().toggleHeading({ level: 3 }).run(),\n      isActive: () => editor.isActive('heading', { level: 3 }) ?? false,\n    },\n    {\n      name: 'To-do List',\n      icon: CheckSquare,\n      command: () => editor.chain().focus().toggleTaskList().run(),\n      isActive: () => editor.isActive('taskItem') ?? false,\n    },\n    {\n      name: 'Bullet List',\n      icon: ListOrdered,\n      command: () => editor.chain().focus().toggleBulletList().run(),\n      isActive: () => editor.isActive('bulletList') ?? false,\n    },\n    {\n      name: 'Numbered List',\n      icon: ListOrdered,\n      command: () => editor.chain().focus().toggleOrderedList().run(),\n      isActive: () => editor.isActive('orderedList') ?? false,\n    },\n    {\n      name: 'Quote',\n      icon: TextQuote,\n      command: () =>\n        editor\n          ?.chain()\n          .focus()\n          .toggleNode('paragraph', 'paragraph')\n          .toggleBlockquote()\n          .run(),\n      isActive: () => editor.isActive('blockquote') ?? false,\n    },\n    {\n      name: 'Code',\n      icon: Code,\n      command: () => editor.chain().focus().toggleCodeBlock().run(),\n      isActive: () => editor.isActive('codeBlock') ?? false,\n    },\n  ];\n\n  const activeItem = items.filter((item) => item.isActive()).pop() ?? {\n    name: 'Text',\n  };\n\n  return (\n    <Popover modal open={open} onOpenChange={onOpenChange}>\n      <PopoverTrigger asChild>\n        <Button variant=\"ghost\" className=\"gap-2 rounded-none border-none\">\n          <span className=\"whitespace-nowrap text-sm\">{activeItem.name}</span>\n          <ChevronDown className=\"h-4 w-4\" />\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent\n        sideOffset={5}\n        align=\"start\"\n        className={cn('w-48 p-1', className)}\n        {...props}\n      >\n        {items.map((item) => (\n          <Button\n            key={item.name}\n            onSelect={() => {\n              item.command();\n              onOpenChange(false);\n            }}\n            variant=\"ghost\"\n            className=\"flex w-full gap-2\"\n          >\n            <item.icon size={16} className=\"shrink-0 text-muted-foreground\" />\n            <span className=\"flex-1 text-left\">{item.name}</span>\n            {activeItem.name === item.name && (\n              <CheckIcon size={16} className=\"shrink-0 text-muted-foreground\" />\n            )}\n          </Button>\n        ))}\n      </PopoverContent>\n    </Popover>\n  );\n};\n\nexport type BubbleMenuFormatSelectorProps = HTMLAttributes<HTMLDivElement> & {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n};\n\nexport const BubbleMenuFormatSelector = ({\n  className,\n  open,\n  onOpenChange,\n  ...props\n}: BubbleMenuFormatSelectorProps) => {\n  const { editor } = useCurrentEditor();\n\n  if (!editor) {\n    return null;\n  }\n\n  const items = [\n    {\n      name: 'Bold',\n      isActive: () => editor.isActive('bold') ?? false,\n      command: () => editor.chain().focus().toggleBold().run(),\n      icon: BoldIcon,\n    },\n    {\n      name: 'Italic',\n      isActive: () => editor.isActive('italic') ?? false,\n      command: () => editor.chain().focus().toggleItalic().run(),\n      icon: ItalicIcon,\n    },\n    {\n      name: 'Underline',\n      isActive: () => editor.isActive('underline') ?? false,\n      command: () => editor.chain().focus().toggleUnderline().run(),\n      icon: UnderlineIcon,\n    },\n    {\n      name: 'Strikethrough',\n      isActive: () => editor.isActive('strike') ?? false,\n      command: () => editor.chain().focus().toggleStrike().run(),\n      icon: StrikethroughIcon,\n    },\n    {\n      name: 'Code',\n      isActive: () => editor.isActive('code') ?? false,\n      command: () => editor.chain().focus().toggleCode().run(),\n      icon: CodeIcon,\n    },\n    {\n      name: 'Superscript',\n      isActive: () => editor.isActive('superscript') ?? false,\n      command: () => editor.chain().focus().toggleSuperscript().run(),\n      icon: SuperscriptIcon,\n    },\n    {\n      name: 'Subscript',\n      isActive: () => editor.isActive('subscript') ?? false,\n      command: () => editor.chain().focus().toggleSubscript().run(),\n      icon: SubscriptIcon,\n    },\n  ];\n\n  return (\n    <Popover modal open={open} onOpenChange={onOpenChange}>\n      <PopoverTrigger asChild>\n        <Button variant=\"ghost\" className=\"gap-2 rounded-none border-none\">\n          <span className=\"whitespace-nowrap text-sm\">Format</span>\n          <ChevronDownIcon size={16} />\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent\n        sideOffset={5}\n        align=\"start\"\n        className={cn('w-48 p-1', className)}\n        {...props}\n      >\n        {items.map((item, index) => (\n          <Button\n            key={index}\n            onSelect={() => {\n              item.command();\n              onOpenChange(false);\n            }}\n            variant=\"ghost\"\n            className=\"flex w-full gap-2\"\n          >\n            <item.icon size={16} className=\"shrink-0 text-muted-foreground\" />\n            <span className=\"flex-1 text-left\">{item.name}</span>\n            {item.isActive() ? (\n              <CheckIcon size={16} className=\"shrink-0 text-muted-foreground\" />\n            ) : null}\n          </Button>\n        ))}\n      </PopoverContent>\n    </Popover>\n  );\n};\n\ntype BubbleMenuLinkSelectorProperties = {\n  readonly open: boolean;\n  readonly onOpenChange: (open: boolean) => void;\n};\n\nexport const BubbleMenuLinkSelector = ({\n  open,\n  onOpenChange,\n}: BubbleMenuLinkSelectorProperties) => {\n  const [url, setUrl] = useState<string>('');\n  const inputReference = useRef<HTMLInputElement>(null);\n  const { editor } = useCurrentEditor();\n\n  const isValidUrl = (text: string): boolean => {\n    try {\n      new URL(text);\n      return true;\n    } catch {\n      return false;\n    }\n  };\n\n  const getUrlFromString = (text: string): string | null => {\n    if (isValidUrl(text)) {\n      return text;\n    }\n    try {\n      if (text.includes('.') && !text.includes(' ')) {\n        return new URL(`https://${text}`).toString();\n      }\n\n      return null;\n    } catch {\n      return null;\n    }\n  };\n\n  useEffect(() => {\n    inputReference.current?.focus();\n  }, []);\n\n  if (!editor) {\n    return null;\n  }\n\n  const handleSubmit: FormEventHandler<HTMLFormElement> = (event) => {\n    event.preventDefault();\n\n    const href = getUrlFromString(url);\n\n    if (href) {\n      editor.chain().focus().setLink({ href }).run();\n      onOpenChange(false);\n    }\n  };\n\n  const defaultValue = (editor.getAttributes('link') as { href?: string }).href;\n\n  return (\n    <Popover modal open={open} onOpenChange={onOpenChange}>\n      <PopoverTrigger asChild>\n        <Button variant=\"ghost\" className=\"gap-2 rounded-none border-none\">\n          <ExternalLinkIcon size={16} />\n          <p\n            className={cn(\n              'underline decoration-text-muted underline-offset-4',\n              {\n                'text-primary': editor.isActive('link'),\n              }\n            )}\n          >\n            Link\n          </p>\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent align=\"start\" className=\"w-60 p-0\" sideOffset={10}>\n        <form onSubmit={handleSubmit} className=\"flex p-1\">\n          <input\n            aria-label=\"Link URL\"\n            ref={inputReference}\n            type=\"text\"\n            placeholder=\"Paste a link\"\n            className=\"flex-1 bg-background p-1 text-sm outline-none\"\n            defaultValue={defaultValue ?? ''}\n            value={url}\n            onChange={(event) => setUrl(event.target.value)}\n          />\n          {editor.getAttributes('link').href ? (\n            <Button\n              size=\"icon\"\n              variant=\"outline\"\n              type=\"button\"\n              className=\"flex h-8 items-center rounded-sm p-1 text-destructive transition-all hover:bg-destructive-foreground dark:hover:bg-destructive\"\n              onClick={() => {\n                editor.chain().focus().unsetLink().run();\n                onOpenChange(false);\n              }}\n            >\n              <TrashIcon size={16} />\n            </Button>\n          ) : (\n            <Button size=\"icon\" variant=\"secondary\" className=\"h-8\">\n              <CheckIcon size={16} />\n            </Button>\n          )}\n        </form>\n      </PopoverContent>\n    </Popover>\n  );\n};\n",
      "target": "components/ui/kibo-ui/editor.tsx"
    }
  ]
}